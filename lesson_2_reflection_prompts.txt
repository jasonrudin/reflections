What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository the folder .git is created for the metadata to allow for version control. You need this to start tracking the changes in your document. However, nothing is committed yet!

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different because it is a non-final way to prepare a commit and organize your files into logical chunks to be committed. The value of this is that you don’t need to commit your whole working directory each time, and you can keep your commits to be logical changes.

How can you use the staging area to make sure you have one commit per logical
change?

Even if you are making many changes at once, you can push the changes one at a time to make sure that it is easy to roll them back or find specific edits. It also allows you to review the changes before you commit them.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

You want to try out fancy new things, but also need to keep a stable normal version in tact. branches allow you try things out while starting from the same code base.

How do the diagrams help you visualize the branch structure?
They help me understand what is reachable by different commits/branches. Commits only know about their parents

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

You get a new commit with the combination of the two branches. you can then delete the old branch since it is redundant.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

Pros of automatic: more efficient, many merges are highly automated. however not automating everything is also good because there could be some confusion.
